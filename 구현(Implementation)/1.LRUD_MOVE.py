"""
문제
    여행가 A는 N X N 크기의 정사각형 공간 위에 서 있다.
    - 공간은 1 x 1 크기의 정사각형으로 나누어져 있다.

    왼쪽 위 좌표는 (1,1)이며 오른쪽 아래 좌표는 (n,n)에 해당한다.

    여행가 A는 상, 하, 좌, 우 방향으로 이동할 수 있으며, 시작 좌표는 항상 (1,1)이다.

    우리 앞에는 여행가 A가 이동할 계획이 적힌 계획서가 놓여 있다.

    L, R, U, D 의 문자가 적혀있으며 각각 왼쪽, 오른쪽, 위, 아래로 한칸이동을 의미

    여행가가 정사각형을 벗어나는 움직임은 무시된다
    Ex) 1, 1 에서 U 에 해당하면 무시된다.

    (5,5)에서 R → R → R → U → D → D  인경우 (3,4)가 도착위치
    최종적으로 도착 지점의 좌표를 출력하는 프로그램을 작성하시오.

    - 입력조건
    - 첫째 줄에 공간의 크기를 나타내는 N이 주어진다(1≤ N ≤ 100)
    - 둘째 줄에 여행가 A가 이동할 계획서 내용이 주어진다 (1≤ 이동횟수 ≤ 100)

    - 출력 조건
        - 첫째 줄에 여행가 A가 최종적으로 도착할 지점의 좌표 (X,Y)를 공백으로 구분하여 출력한다.

    - 입력 예시
        5
        R R R U D D

    - 출력 예시
        3 4
"""

# 포인트는 전체 맵 크기를 따로 만들 필요가 없다 결국
# 기준점을 넘어가는 용도로 전체크기를 활용하면 되는것
# x축과 y축을 활용하여 이동좌표를 설정해두고
# 해당 문자열이 입력 되엇을때 좌표값을 수정해가면서 최종좌표를 출력하면 끝

n = int(input())
x, y = 1, 1
plans = input().split()
# plans 는 LRUD 를 쪼개서 입력받음

# LRUD에 따른 이동방향에 따른 각 인덱스별 xy의이동 값이 내제되어 있음
# 0 인덱스의 경우 L 좌측 이동을 해야 되므로 행값인 앞의 x의값은 고정
# 열값인 뒤의 y의 값은 변경
dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
move_types = ['L', 'R', 'U', 'D']

# 설정값들 유지만으로 로직이 편해진다 위에 값을 설정하는 부분을 잘 생각해볼것

for plan in plans:

    for i in range(len(move_types)):  # dx dy 인덱스 돌리려고

        if plan == move_types[i]:
            # 지역 변수로 이동 시킬 값에 대한 값을 담아둘 nx와 ny를 활용
            nx = x + dx[i]
            ny = y + dy[i]
    if nx < 1 or ny < 1 or nx > n or ny > n:
        continue
    x, y = nx, ny

print(x, y)

"""
시뮬레이션 유형의 경우 일련의 명령에 따라 개체를 차례대로 이동시킴
1. 입력값에대한 생각을 한뒤 입력값을 효율적으로 받기
2. 입력값을 토대로 이동할 범주와 범위값을 생각
3. 해당 범위에 따른 필드 값들을 잘생성하기
4. 행열및 좌표 문제의 경우 결국 이동시킬 범주만 알면되고 해당 범주에 따른 이동값을 리스트 인덱스에 저장후 연산과정을 통해서 추출하면 된다
"""